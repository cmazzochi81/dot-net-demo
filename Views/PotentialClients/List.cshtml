@model IEnumerable<TheCorridorGroupMd.Models.PotentialClients>

@{
    ViewBag.Title = "List";
}

<h2>List</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.User.Email)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.FirstName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.LastName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Email)
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.User.Email)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.FirstName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.LastName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Email)
        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id=item.Id }) |
            <!--The Details Action linked here, only shows the current user's account.
                even if you pass in a PotentialClients Id, which will be ignored
                and what you need to do is create a new action called "DetailsForAdmin" -->
            @Html.ActionLink("Details", "DetailsForAdmin", new { id=item.Id }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.Id })
        </td>
    </tr>
}

</table>

<!--Logic, for how dollar amounts for transactions are formatted. Negative amounts
    to be red, and everything else to be green. You create a method called formatAmount-->
<!--The integer can be explicitly cast, or implicitly cast as decimals,
    but for things like 25.50 you want to use the 'm' suffix, to make sure
    their not treated as doubles-->
@{
    var amounts = new List<Decimal> { 100, 25.50m, -40, 275.99m };
    
}

@helper formatAmount(decimal amount)
{
    var color = "green";

    if (amount < 0)
    {
        color = "red";
    }

}
    <!--Formating a currency for the default culture. Then, anywhere on the page,
        even above the helper method declaration, -->
